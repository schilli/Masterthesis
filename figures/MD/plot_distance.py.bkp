#! /usr/bin/env python

import sys
import numpy as np
import matplotlib.pyplot as plt
from running_average import *


DataFilename1 = "npt_50ns_distance_LEU102N-TYR56CA.dat"
DataFilename2 = "npt_50ns_distance_LEU102N-GLU74CA.dat"
figFilename  = "citrate_bound_50ns_distance_GLU74CA-TYR56CA-LEU102N.pdf"
title  = 'Citrate bound CitA-PAS active site opening (distance)'
xlabel = 'time (ns)'
ylabel = 'distance (Angstrom)'

# crystal structure angles
crystal_dist_LEU_TYR = 9.312
crystal_dist_LEU_GLU = 9.939

# load data
datafile1 = open(DataFilename1, 'r')
datafile2 = open(DataFilename2, 'r')
data1 = datafile1.readlines()
data2 = datafile2.readlines()
datafile1.close()
datafile2.close()

# preprocess data
preprocessed1 = np.zeros(len(data1), dtype=float)
preprocessed2 = np.zeros(len(data2), dtype=float)
times        = np.zeros(len(data1), dtype=float)
for i, line in enumerate(data1):
    preprocessed1[i] = 10 * float(line.split()[1])
    preprocessed2[i] = 10 * float(data2[i].split()[1])
    times[i] = float(line.split()[0])

nticks      = 6
xticks      = np.linspace(0, len(times), nticks)
xticklabels = np.linspace(0, times[-1]/1000, nticks)   


# compute running average
width = 50
average1 = running_average(preprocessed1, width, win="gaussian")
average2 = running_average(preprocessed2, width, win="gaussian")


# set limits
xmin = 0
xmax = len(average1)
ymin = 7
ymax = 22


# create figure
fig = plt.figure()
ax  = fig.add_subplot(111)

# plot data
ax.plot(average1, 'r', label='LEU102N-TYR56CA', linewidth=2)
ax.plot([0, len(preprocessed1)], [crystal_dist_LEU_TYR, crystal_dist_LEU_TYR], \
        'r--', label='citrate bound crystal structure', linewidth=1)
ax.plot(average2, 'b', label='LEU102N-GLU74CA', linewidth=2)
ax.plot([0, len(preprocessed2)], [crystal_dist_LEU_GLU, crystal_dist_LEU_GLU], \
        'b--', label='citrate bound crystal structure', linewidth=1) 

# annotate plot
ax.set_xlim(xmin, xmax)
ax.set_ylim(ymin, ymax) 
ax.set_title(title)
ax.set_xlabel(xlabel)
ax.set_ylabel(ylabel)
ax.legend(loc='upper left')

ax.set_xticks(xticks)
ax.set_xticklabels(xticklabels)

# save plot
plt.savefig(figFilename)
plt.show()
